// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  Admin
  User
}

enum UserGroup {
  Office
  Repair
  Developer
  Commom
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  role           UserRole  @default(User)
  group          UserGroup @default(Commom)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  taskId String[] @db.ObjectId
  tasks  Tasks[]  @relation(name: "worker", fields: [taskId], references: [id])

  createdTaskIds String[] @db.ObjectId
  cratedTaks     Tasks[]  @relation(name: "creator", fields: [createdTaskIds], references: [id])

  accounts Account[]
  Tasks    Tasks?    @relation(fields: [tasksId], references: [id])
  tasksId  String?   @db.ObjectId
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Tasks {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  group        String
  state        String
  requirements String?
  important    Boolean?
  finished     Boolean?
  finishedAt   DateTime? @default(now())

  creatorId String[] @unique @db.ObjectId
  creator   User[]   @relation(name: "creator", fields: [creatorId], references: [id])

  workerId String[] @db.ObjectId
  worker   User[]   @relation(name: "worker", fields: [workerId], references: [id])
  userId   String?  @db.ObjectId
  User     User[]
}
